{"version":3,"sources":["../src/ui-framework.js"],"names":["createComponent","tagName","attributes","children","Symbol","iterator","i","next","length","done","value","attribute","getComponentAttribute","setComponentAttribute","component","name","renderComponent","element","html","renderComponentAttributes","renderComponentChildren","Element","innerHTML","attributesHTML","getAttributes","push","join","childrenHTML","child","createButton","label","createRoundedRedButton","a","style"],"mappings":"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","file":"ui-framework.js","sourcesContent":["// @flow\n// use strict reste nécessaire en es6+ sauf dnas les classes et les modules\n// où il est implicite\n\"use strict\";\n\n/**\n * Fonction permettant d'initialiser un objet littéral component.\n * Permet de l'initialiser avec son tagName, une liste d'attributs et des enfants.\n * @param  {String} tagName    Nom de la balise html à générer\n * @param  {Object} attributes Liste des attributs html à ajouter sous la forme de paires clé:valeur\n * @param  {Array}  children   Liste des enfants du composant. Chaque enfant peut être un autre component ou une String.\n */\n// on utilise ici une arrow function et des valeurs par défaut\nconst createComponent = ( tagName:string = 'div', attributes:{} = {}, children:Array<mixed> = [] ): {} => ({\n\t// on utilise la notation raccourcie pour la création d'objets littéraux\n\t// les parenthèses autour de l'objet littéral permettent au navigateur\n\t// de savoir qu'il s'agit d'une valeur de retour de type objet littéral\n\t// et pas d'un bloc de code !\n\ttagName,\n\tattributes,\n\tchildren,\n\t// Fonction Iterator :\n\t[Symbol.iterator]() {\n\t\treturn {\n\t\t\ti: 0,\n\t\t\tchildren: this.children,\n\t\t\tnext() {\n\t\t\t\tif (this.i >= this.children.length) {\n\t\t\t\t\treturn { done: true };\n\t\t\t\t}\n\t\t\t\treturn {value:this.children[ this.i++ ]};\n\t\t\t}\n\t\t}\n\t},\n\t// Generator function :\n\t*getAttributes() {\n\t\tfor (let attribute:string in this.attributes){\n\t\t\tyield { attribute, value: getComponentAttribute(this, attribute) };\n\t\t}\n\t}\n});\n\n/**\n * Ajoute ou remplace un attribut.HTML dans un composant\n * @param {Object} component  composant à modifier\n * @param {String} attribute  Clé de l'attribut à modifier/ajouter\n * @param {String} value valeur de l'attribut\n * @see getComponentAttribute()\n */\nconst setComponentAttribute = ( component, attribute:string, value:string ) =>\t{\n\tcomponent.attributes[ name ] = value;\n}\n\n/**\n * Récupère la valeur d'un attribut HTML d'un composant\n * @param {Object} component  composant à modifier\n * @param {String} attribute  Clé de l'attribut à récupérer\n * @see setComponentAttribute()\n */\n// utilisation d'une arrow function en notation raccourcie\n// la partie après la flèche est la valeur de retour\nconst getComponentAttribute = ( component, attribute:string ):string => component.attributes[ attribute ];\n\n\n/**\n * Retourne le code html correspondant au Component et à ses enfants\n * et l'affiche éventuellement dans un élément html.\n * @return {String} code html généré\n * @see renderComponentAttributes()\n * @see renderComponentChildren()\n */\nconst renderComponent = ( component, element = null ):string => {\n\t// utilisation du destructuring pour accéder à une propriété d'un objet\n\tconst {tagName}:{tagName:string} = component;\n\t// utilisation d'une arrow function\n\tconst html:string = `<${tagName} ${renderComponentAttributes(component)}>\n\t\t\t\t${renderComponentChildren( component )}\n\t\t\t</${tagName}>`;\n\tif ( element instanceof Element ) {\n\t\telement.innerHTML = html;\n\t}\n\treturn html;\n}\n\n/**\n * Retourne le code html des attributes d'un component.\n * @param      {Object}    component  Le composant dont on doit rendre les attributs\n * @return     {String}  code html des attributs du component\n */\nconst renderComponentAttributes = component => {\n\tconst attributesHTML:Array<string> = [];\n\t// let étant une déclaration scopée, plus besoin de la déclarer en haut de fonction\n\t// `attribute` n'existe qu'à l'intérieur du for\n\t// for ( let attribute in component.attributes ) {\n\t// \tattributesHTML.push( ` ${attribute}=\"${component.attributes[ attribute ]}\"` );\n\t// }\n\n\t// utilisation de la generator function *getAttributes\n\tfor ( const {attribute, value} of component.getAttributes() ) {\n\t\tattributesHTML.push( ` ${attribute}=\"${value}\"` );\n\t}\n\n\treturn attributesHTML.join('');\n}\n\n/**\n * Retourne le code html des enfants d'un component.\n * @param      {Object}    component  Le composant dont on doit rendre les enfants\n * @return     {String}  code html des enfants du component\n * @see renderComponent()\n */\n// const renderComponentChildren = component => component.children.map(\n// \t\tchild => typeof child === 'string' ? child : renderComponent( child )\n// \t).join('');\n// NB : cette notation bien qu'ultra abrégée et profitant des évolutions de la syntaxe ES6+\n// n'en reste pas moins peu lisible.\n//\n// version utilisant l'itérator\nconst renderComponentChildren = component => {\n\tconst childrenHTML:Array<string> = [];\n\tfor ( const child of component ){\n\t\tchildrenHTML.push( typeof child === 'string' ? child : renderComponent( child ) );\n\t}\n\treturn childrenHTML.join('');\n}\n\nconst createButton = ( label:string = 'Ne surtout pas cliquer ici', attributes:{} ):{} =>\n\tcreateComponent( 'button', attributes, [ label ] );\n\nconst createRoundedRedButton = ( label:string, attributes:{} ):{} => {\n\t// on utilise ici une feature en stage-3 à l'heure actuelle\n\t// cf. https://github.com/tc39/proposal-object-rest-spread\n\t// nécessite l'activation des fonctionnalités javascript expérimentales dans chrome\n\tconst a:{} = {\n\t\t...attributes,\n\t\tstyle : 'border-radius: 5px; color: white; background-color: red'\n\t};\n\treturn createButton( label, a );\n}"]}